<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
					    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
					    http://www.springframework.org/schema/tx    
					    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
					    http://www.springframework.org/schema/context   
					    http://www.springframework.org/schema/context/spring-context-4.3.xsd 
					    http://www.springframework.org/schema/aop
					    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
					    http://www.springframework.org/schema/mvc   
					    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
					    http://www.springframework.org/schema/task
					    http://www.springframework.org/schema/task/spring-task-4.3.xsd">
    
   
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>

	<!-- 1. 数据源 : DriverManagerDataSource -->
	<!-- <bean id="dataSource" -->
	<!-- class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
	<!-- <property name="driverClassName" value="com.mysql.jdbc.Driver" /> -->
	<!-- <property name="url" value="${jdbc.url}"/> -->
	<!-- <property name="username" value="${jdbc.username}" /> -->
	<!-- <property name="password" value="${jdbc.password}" /> -->
	<!-- </bean> -->
	
	<!-- 1. 数据源 : c3p0连接池 -->
	<bean id="dataSourceOne" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" 	 value="${jdbc.url}"/>
		<property name="user"        value="${jdbc.username}" />
		<property name="password"    value="${jdbc.password}" />
		
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --> 
		<property name="initialPoolSize"    value="${jdbc.initialPoolSize}" />
		<!--连接池中保留的最小连接数  Default: 3-->
		<property name="minPoolSize"        value="${jdbc.minPoolSize}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize"        value="${jdbc.maxPoolSize}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement"   value="${jdbc.acquireIncrement}" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 
			SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --> 
		<property name="checkoutTimeout"    value="${jdbc.checkoutTimeout}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod"    value="${jdbc.idleConnectionTestPeriod}" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime"    	value="${jdbc.maxIdleTime}" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 
			时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
			等方法来提升连接测试的性能。Default: false --> 
		<property name="testConnectionOnCheckout"    value="${jdbc.testConnectionOnCheckout}" />
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<property name="testConnectionOnCheckin"     value="${jdbc.testConnectionOnCheckin}" />
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 
		通过多线程实现多个操作同时被执行。Default: 3--> 
		<property name="numHelperThreads"    value="${jdbc.numHelperThreads}" />
	</bean>
	
	<bean id="dataSourceTwo" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassNameTwo}" />
		<property name="jdbcUrl" 	 value="${jdbc.urlTwo}"/>
		<property name="user"        value="${jdbc.usernameTwo}" />
		<property name="password"    value="${jdbc.passwordTwo}" />
		
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --> 
		<property name="initialPoolSize"    value="${jdbc.initialPoolSizeTwo}" />
		<!--连接池中保留的最小连接数  Default: 3-->
		<property name="minPoolSize"        value="${jdbc.minPoolSizeTwo}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize"        value="${jdbc.maxPoolSizeTwo}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement"   value="${jdbc.acquireIncrementTwo}" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 
			SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --> 
		<property name="checkoutTimeout"    value="${jdbc.checkoutTimeoutTwo}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod"    value="${jdbc.idleConnectionTestPeriodTwo}" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime"    	value="${jdbc.maxIdleTimeTwo}" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 
			时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
			等方法来提升连接测试的性能。Default: false --> 
		<property name="testConnectionOnCheckout"    value="${jdbc.testConnectionOnCheckoutTwo}" />
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<property name="testConnectionOnCheckin"     value="${jdbc.testConnectionOnCheckinTwo}" />
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 
		通过多线程实现多个操作同时被执行。Default: 3--> 
		<property name="numHelperThreads"    value="${jdbc.numHelperThreadsTwo}" />
	</bean>

	<!-- 2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- sql分页拦截  sqlI为selectPage(不区分大小) -->
		<property name="plugins">    
	        <bean class="com.qskh.openplatform.interceptor.PageInterceptor">    
	        </bean>    
    	</property> 
	</bean>

	<!-- 动态配置数据源 -->  
	  <bean id ="dataSource" class= "com.qskh.openplatform.datasource.DynamicDataSource" >  
	          <property name ="targetDataSources">  
	                <map key-type ="java.lang.String">  
	                      <entry value-ref ="dataSourceOne" key= "dataSourceOne"></entry>  
	                      <entry value-ref ="dataSourceTwo" key= "dataSourceTwo"></entry>  
	                </map>  
	          </property>
	          <property name ="defaultTargetDataSource" ref= "dataSourceOne"></property >
	  </bean >
	
	<!-- 3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory basePackage:指定sql映射文件/接口所在的包（自动扫描） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.qskh.openplatform.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 全局异常处理 -->
	<bean id="exceptionResolver" class="com.qskh.openplatform.ExceptionHandler.CustomExceptionResolver"></bean> 

	<!-- 5. 使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
	<tx:annotation-driven transaction-manager="txManager" />

</beans>